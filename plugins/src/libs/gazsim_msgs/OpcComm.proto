/***************************************************************************
 *  WorkpieceAddition.proto - LLSF Protocol - Addition to put in Worpieces
 *
 *  Created: Mon Feb 11 16:35:46 2013
 *  Copyright  2015  Randolph Maa√üen
 ****************************************************************************/

/*  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the authors nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto2";

package gazsim_msgs;



  // Registers existing in the MPS, to which it is possible to subscribe to
  enum Register {
    ACTION_ID = 10;
    BARCODE = 9;
    DATA_PAYLOAD1 = 8;
    DATA_PAYLOAD2 = 7;
    ERROR = 6;
    SLIDECOUNT = 5;
    STATUS_ENABLED = 4;
    STATUS_ERR = 3;
    STATUS_READY = 2;
    STATUS_BUSY = 1;
    LAST = 0; // must be the last in the list
  };




// Base commands for mps_comm communication:
// Each machine type has a base prefix.
// The sub commands are added to these base prefixes.
enum Station {
  STATION_BASE = 100;
  STATION_RING = 200;
  STATION_CAP = 300;
  STATION_DELIVERY = 400;
  STATION_STORAGE = 500;
}

// Payload for set_type_cmd
enum StationType {
  STATION_TYPE_BS = 1;
  STATION_TYPE_RS = 2;
  STATION_TYPE_CS = 3;
  STATION_TYPE_DS = 4;
  STATION_TYPE_SS = 5;
}

// payload for light command
enum LightState {
  LIGHT_STATE_OFF = 0;
  LIGHT_STATE_ON = 1;
  LIGHT_STATE_BLINK = 2;
}

// all stations, no combining with Station code.
// These commands will be sent, as they are.
enum LightColor {
  LIGHT_COLOR_RESET = 20;
  LIGHT_COLOR_RED = 21;
  LIGHT_COLOR_YELLOW = 22;
  LIGHT_COLOR_GREEN = 23;
}

enum BaseColor {
  BASE_COLOR_RED = 1;
  BASE_COLOR_BLACK = 3;
  BASE_COLOR_SILVER = 2;
}

enum MPSCommand {
  option allow_alias = true;
  COMMAND_NOTHING = 0;
  COMMAND_SET_TYPE = 10;
  COMMAND_RESET = 0;
  COMMAND_MOVE_CONVEYOR = 2;
}


enum Operation {
  option allow_alias = true;
  OPERATION_GET_BASE = 1;
  OPERATION_MOUNT_RING = 3;
  OPERATION_CAP_ACTION = 1;
  OPERATION_CAP_RETRIEVE = 1;
  OPERATION_CAP_MOUNT = 2;
  OPERATION_DELIVER = 1;
}

// The status flags.
// To be combined with bitwise | and read with bitwise &
//enum Status {
//  STATUS_ENABLED = 4;
//  STATUS_ERR = 3;
//  STATUS_READY = 2;
//  STATUS_BUSY = 1;
//}
// (they are part of Register enum)


enum ConveyorDirection {
 FORWARD = 1;
 BACKWARD = 2;
}

enum MPSSensor {
 INPUT = 1;
 MIDDLE = 2;
 OUTPUT = 3;
}


// Time stamp and duration structure.
// Can be used for absolute times or
// durations alike.

//Messages to set Opc registers
message OpcSetRegister{
  required string mps = 1;
  required Register reg = 2;
  required string value = 3;
}



//Message to broadcast OPC instructions
message OpcInstHeartbeat {
 optional string hearbeat =1; 
}

message OpcInstReset {
}

message OpcInstMoveConveyor {
  required ConveyorDirection direction = 3;
  required MPSSensor sensor = 4;

}

message OpcInstSetLight {
  required LightColor color = 3;
  required LightState state = 4;
}


message OpcInstBaseOperation {
  required BaseColor color = 3;
}

message OpcInstCapOperation {
  required Operation operation  = 3 ;
}

message OpcInstRingOperation {
  required int32 feeder = 3 ;
}

message OpcInstDeliverOperation {
  required int32 slot = 3;
}


message OpcInstruction{
  required string mps = 1;
  required Station station = 2 ;

  optional OpcInstHeartbeat heartbeat = 3;
  optional OpcInstReset reset = 4;
  optional OpcInstMoveConveyor move_conveyor = 5;
  optional OpcInstSetLight  set_light= 6; 
  optional OpcInstBaseOperation base_operation = 7; 
  optional OpcInstCapOperation cap_operation = 8;
  optional OpcInstRingOperation ring_operation = 9;
  optional OpcInstDeliverOperation deliver_operation  = 10;
}


